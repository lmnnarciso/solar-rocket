type Query {
  Mission(id: ID!): Mission
  Missions(sort: MissionSortOptions): [Mission]!
}

type Mutation {
  createMission(mission: MissionInput): Mission
  updateMission(mission: MissionInputUpdate): Mission!
  deleteMission(mission: MissionInputUpdate): Mission!
}

input MissionInput {
  title: String!
  operator: String!
  launch: LaunchInput!
  orbit: OrbitInput!
  payload: PayloadInput!
}

input MissionInputUpdate {
  id: String!
  title: String!
  operator: String!
  launch: LaunchInput!
  orbit: OrbitInput!
  payload: PayloadInput!
}

input LaunchInput {
  date: DateTime!
  vehicle: String!
  location: LocationInput!
}

input LocationInput {
  name: String!
  longitude: Float!
  latitude: Float!
}

input OrbitInput {
  periapsis: Float!
  apoapsis: Float!
  inclination: Float!
}

input PayloadInput {
  capacity: Int!
  available: Int!
}

input MissionSortOptions {
  field: MissionSortFields!
  desc: Boolean
}

enum MissionSortFields {
  Title
  Date
  Operator
}

type Mission {
  id: ID!
  title: String!
  operator: String!
  launch: Launch!
  orbit: Orbit!
  payload: Payload!
}

type Launch {
  date: DateTime!
  vehicle: String!
  location: Location!
}

type Location {
  name: String!
  longitude: Float!
  latitude: Float!
}

type Orbit {
  periapsis: Float!
  apoapsis: Float!
  inclination: Float!
}

type Payload {
  capacity: Int!
  available: Int!
}

scalar DateTime
